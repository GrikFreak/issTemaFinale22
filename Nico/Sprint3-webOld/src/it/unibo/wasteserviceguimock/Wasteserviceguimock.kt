/* Generated by AN DISI Unibo */ 
package it.unibo.wasteserviceguimock

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Wasteserviceguimock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("GUI | STARTED")
					}
					 transition(edgeName="t00",targetState="updateGUI",cond=whenEvent("updateContainersWeight"))
					transition(edgeName="t01",targetState="updateGUI",cond=whenEvent("updateStatusLed"))
					transition(edgeName="t02",targetState="updateGUI",cond=whenEvent("updateTrolleyStatus"))
					transition(edgeName="t03",targetState="updateGUI",cond=whenEvent("updateTrolleyPos"))
				}	 
				state("updateGUI") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("updateContainersWeight(W_PLASTIC,W_GLASS)"), Term.createTerm("updateContainersWeight(W_PLASTIC,W_GLASS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Weights = "" + payloadArg(0) + "," + payloadArg(1)  
								emit("updateObserver", "updateObserver($Weights)" ) 
						}
						if( checkMsgContent( Term.createTerm("updateStatusLed(LED_STATUS)"), Term.createTerm("updateStatusLed(LED_STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Led_Status = payloadArg(0)  
								emit("updateObserver", "updateObserver($Led_Status)" ) 
						}
						if( checkMsgContent( Term.createTerm("updateTrolleyStatus(TROLLEY_STATUS)"), Term.createTerm("updateTrolleyStatus(TROLLEY_STATUS)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Trolley_Status = payloadArg(0)  
								emit("updateObserver", "updateObserver($Trolley_Status)" ) 
						}
						if( checkMsgContent( Term.createTerm("updateTrolleyPos(POSITION)"), Term.createTerm("updateTrolleyPos(TROLLEY_POSITION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var Trolley_Pos = payloadArg(0)  
								emit("updateObserver", "updateObserver($Trolley_Pos)" ) 
						}
					}
					 transition(edgeName="t14",targetState="updateGUI",cond=whenEvent("updateContainersWeight"))
					transition(edgeName="t15",targetState="updateGUI",cond=whenEvent("updateStatusLed"))
					transition(edgeName="t16",targetState="updateGUI",cond=whenEvent("updateTrolleyStatus"))
					transition(edgeName="t17",targetState="updateGUI",cond=whenEvent("updateTrolleyPos"))
				}	 
			}
		}
}

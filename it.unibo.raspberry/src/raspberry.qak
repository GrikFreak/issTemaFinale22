System raspberry

//mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/nat/radar"
// add 	implementation name: 'it.unibo.radarSystem22.domain-1.0'

//SONAR 
Dispatch sonaractivate   : info(ARG)
Dispatch sonardeactivate : info(ARG)
Event    sonar           : distance( V )   //emitted by sonarSimulator or sonardatasource	
Event    sonardata       : distance( V )   //for the application level
Event obstacle : obstacle(V)
Event noobstacle : noobstacle(V)

// LED
Dispatch led_status : led_status (CMD)

// mettere ip del proprio pc
Context ctxWasteService ip [host="192.168.1.131" port=8025]  
Context ctxraspberrypi ip [host="localhost" port=8030] 

ExternalQActor wasteservice context ctxWasteService

//DATA SOURCES
CodedQActor sonarsimulator  context ctxraspberrypi className "sonarSimulator"  
CodedQActor sonardatasource context ctxraspberrypi className "sonarHCSR04Support2021"

/*
 * Actors for the sonar-data handling pipe
 * NOTE : we do not use the it.unibo`.radarSystem22.domain
 * we could do it by introducing an observer that emits the event
 */
//CodedQActor datalogger     context ctxsonaronrasp className "dataLogger"
CodedQActor datacleaner    context ctxraspberrypi className "dataCleaner"
CodedQActor distancefilter context ctxraspberrypi className "distanceFilter"


QActor sonarqak22 context ctxraspberrypi{
	[# val simulate       = false
	   val sonarActorName = "sonarqak22"
	   val usingDomain    = false
	#]
	State s0 initial {
		//printCurrentMessage
		run  sonarConfig.configureTheSonar(simulate, sonarActorName, usingDomain)
		//ASSUMPTION: the sonar subsystem emits the event sonar:distance(V)
	}
	Transition t0 whenMsg sonaractivate   -> activateTheSonar
			      whenMsg sonardeactivate -> deactivateTheSonar
	
	State activateTheSonar{
		printCurrentMessage
		if[# simulate #]{
			forward sonarsimulator -m sonaractivate : info(ok) 
			//println("SONAR SIMULATOR")
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			 forward sonardatasource -m sonaractivate : info(ok)  
			 println("SONAR DATASOURCE")
		}
	}
	Transition t0  whenEvent sonar         -> handleSonarData  
	               whenMsg sonardeactivate -> deactivateTheSonar
	
	State deactivateTheSonar{
		printCurrentMessage
	}
	Goto end
 
  	State handleSonarData{
  		 onMsg( sonar : distance(D) ){
   		 	[# val D = payloadArg(0) #]  
  		    //println("%%%%%%%%%%%%%%%%%%%%%%%%%%% emit %%%%%%%%%%%%%%% ${D}")
  		 	emit sonardata : distance($D) //for the application
  		 }
  	}
   	Transition t0 whenEvent sonar -> handleSonarData
   				  whenMsg sonardeactivate -> deactivateTheSonar
   		
	State end{ 
		println("sonarqak22 BYE")
		[# System.exit(0) #]
	}
}

QActor sonarmastermock context ctxraspberrypi{
	State s0 initial {
		forward sonarqak22 -m sonaractivate : info(ok)
//		delay 20000 
//		forward sonarqak22 -m sonardeactivate : info(ok)
	}
} 

QActor led context ctxraspberrypi {
	[#
		var Cmd = ""
		var Blink = false
	#]
	
	State wait_cmd initial {
		printCurrentMessage
		println("LED | WAIT CMD")
		println("LED | OFF")
		[# Runtime.getRuntime().exec("sudo bash led25GpioTurnOn.sh") #] // led inizialmente spento 
	}
	Transition t0 whenMsg led_status -> esegui_cmd
	
	State esegui_cmd {
		printCurrentMessage
		onMsg(led_status : led_status (CMD)){
			
			[#
				Cmd = payloadArg(0)
				println(Cmd)
				Blink = false
					
			
			if(Cmd == "BLINKS") {
				Blink = true
			}
			#] 
		}
		
	}
	Goto blink if [# Blink #] else onoff
	
	State onoff{
		
	}Goto on if [# Cmd  == "on" #] else off
	
	State on{
		printCurrentMessage
		println("LED | ON")
		[#Runtime.getRuntime().exec("sudo bash ./iss22/bash/led25GpioTurnOn.sh")#]
		updateResource [# "LED:ON" #]
			
	}
	Transition t2 whenMsg led_status -> esegui_cmd
	
	
	State off{
		printCurrentMessage
		println("LED | OFF")
		[#Runtime.getRuntime().exec(" sudo bash ./iss22/bash/led25GpioTurnOff.sh")#]
		updateResource [# "LED:OFF" #]

	}
	Transition t3 whenMsg led_status -> esegui_cmd
	
	State blink {
		printCurrentMessage
		updateResource [# "LED:BLINK" #]
		[#
			Runtime.getRuntime().exec("sudo bash ./iss22/bash/led25GpioTurnOn.sh")
		#]
		delay 300
		[#
			Runtime.getRuntime().exec("sudo bash ./iss22/bash/led25GpioTurnOff.sh")
		#]
		println("LED | BLINKS")
		
	}
	Transition t1 whenTime 300 -> blink
				  whenMsg led_status -> esegui_cmd
}

System wasteservicecore

Request waste_request : waste_request(MATERIAL, TRUCKLOAD)
Reply loadaccept : loadaccept(MATERIAL, TRUCKLOAD)
Reply loadrejected : loadrejected(MATERIAL, TRUCKLOAD)

Request pickup_request : pickup_request(MATERIAL,TRUCKLOAD)
Reply pickup_done : pickup_done(DONE)

Dispatch free_Indoor : free_Indoor(FREE)
Dispatch withdrawal_done : withdrawal_done(DONE)

Event containers_weight : containers_weight(GWEIGHT, PWEIGHT)

Event trolley_status : trolley_status(STATUS)
Event trolley_position : trolley_position(POSITION)

Context ctxWasteService ip [ host="localhost" port=8025 ]

QActor wastetruck context ctxWasteService {
	
	[#
		var Material 	= "";
		var TruckLoad 	= 0L;
		var Materials = arrayListOf<String>("glass", "plastic");
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the WasteTruck is waiting..")
		delay 3000
		
		[# 
			val Load = kotlin.random.Random.nextLong(10,100) 
			val Mat = Materials[kotlin.random.Random.nextInt(1,2)]
		#]
		
		request wasteservice -m waste_request : waste_request($Mat, $Load)
		println("WASTETRUCK | sent request of $Mat load $Load")
	}
	
	Transition t0 whenReply loadaccept -> accepted
				  whenReply loadrejected -> rejected 
				  
	State accepted {
		printCurrentMessage
		onMsg(loadaccept : loadaccept(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTETRUCK | accepted $Material load with weight $TruckLoad")
		}
	}
	
	Transition t1 whenMsg free_Indoor -> leave_Indoor
	
	State rejected {
		printCurrentMessage
		onMsg(loadrejected : loadrejected(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTETRUCK | rejected $Material load with weight $TruckLoad")
		}
	}
	
	Goto leave_Indoor
	
	State leave_Indoor {
		println("WASTETRUCK | WasteTruck left Indoor area.")
	}

	//Goto s0
}

QActor wasteservice context ctxWasteService {
	
	[# 
		var MAXPB 	= 500L;
		var MAXGB 	= 500L;
		var CurrentPB = 0L;
		var CurrentGB = 0L;
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the WasteService is waiting..")
	}
	
	Transition t0 whenRequest waste_request -> handle_request
				  
	State handle_request {
		printCurrentMessage
		onMsg(waste_request : waste_request(MATERIAL, TRUCKLOAD)) {
			[#
				var Material 	= payloadArg(0);
				var TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTESERVICE | arrived request: $Material load with weight $TruckLoad")
			if [# Material.equals("plastic") #] {
				if [# TruckLoad + CurrentPB <= MAXPB #]{
					replyTo waste_request with loadaccept : loadaccept($Material, $TruckLoad) 
					[# CurrentPB += TruckLoad #]
					println("WASTESERVICE | current plastic weight: $CurrentPB")
					request transporttrolley -m pickup_request : pickup_request($Material, $TruckLoad)
					println("WASTESERVICE | Sent pickup request to TransportTrolley")
				} else {
					replyTo waste_request with loadrejected : loadrejected($Material, $TruckLoad)
				}
			} else {
				if [# TruckLoad + CurrentGB <= MAXGB #]{
					replyTo waste_request with loadaccept : loadaccept($Material, $TruckLoad) 
					[# CurrentGB += TruckLoad #]
					println("WASTESERVICE | current glass weight: $CurrentGB")
					request transporttrolley -m pickup_request : pickup_request($Material, $TruckLoad)
					println("WASTESERVICE | Said to TransportTroleey to execute")
				} else {
					replyTo waste_request with loadrejected : loadrejected($Material, $TruckLoad)
				}
			}
			emit containers_weight : containers_weight(CurrentGB, CurrentPB)
		}
	}
	
	Transition t1 whenReply pickup_done -> pickup_Done 
	
	State pickup_Done {
		printCurrentMessage
		forward wastetruck -m free_Indoor : free_Indoor(FREE)
		println("WASTESERVICE | Sent message to WasteTruck to leave indoor area.")
	}
	
	Transition t2 whenMsg withdrawal_done -> withdrawal_Done 
	
	State withdrawal_Done {
		printCurrentMessage
		println("WASTESERVICE | Handle queue if it is.")
	}
	
	Goto s0
	
}

QActor transporttrolley context ctxWasteService {
	
	[#
		var Status	= "IDLE";	
		var Position = "HOME";
		var Material = "";
		var TruckLoad = 0L;
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the TransportTrolley is waiting..")
	}
	
	Transition t0 whenRequest pickup_request -> move_to_INDOOR
	
	State move_to_INDOOR {
		onMsg(pickup_request : pickup_request(MATERIAL,TRUCKLOAD)){
		 	[# 
		 		Material = payloadArg(0)
		 		TruckLoad = payloadArg(1).toLong()
		 	#]
		}
		printCurrentMessage
		println("TRANSPORT TROLLEY | moving to INDOOR")
		[# Status = "WORKING" #]
		[# Position = "GENERIC" #]
		emit trolley_status : trolley_status(Status)
		emit trolley_position : trolley_position(Position)
		delay 500 
		println("TRANSPORT TROLLEY | arrived to INDOOR in status : $Status")
		println("TRANSPORT TROLLEY | picking up $Material of load $TruckLoad")
		[# Position = "INDOOR" #]
		emit trolley_position : trolley_position(Position)
		delay 500
		println("TRANSPORT TROLLEY | picked up, send end action to WS.")
		replyTo pickup_request with pickup_done : pickup_done(DONE)
		
	}
	
	Goto move_to_ContainerP if [# Material.equals("plastic") #] else move_to_ContainerG
	
	State move_to_ContainerP{
		printCurrentMessage
		println("TRANSPORT TROLLEY | moving to plastic container ")
		[# Status = "WORKING" #]
		emit trolley_status : trolley_status(Status)
		delay 500 
		println("TRANSPORT TROLLEY | arrived to plastic container")
		[# Position = "CONTAINERP" #]
		emit trolley_position : trolley_position(Position)
		println("TRANSPORT TROLLEY | settling plastic")
		delay 300
		forward wasteservice -m withdrawal_done : withdrawal_done(DONE)
		[# Status = "IDLE" #]
		emit trolley_status : trolley_status(Status)
	}
	
	Goto move_to_HOME
	
	State move_to_ContainerG{
		printCurrentMessage
		println("TRANSPORT TROLLEY | moving to glass container ")
		[# Status = "WORKING" #]
		emit trolley_status : trolley_status(Status)
		delay 500 
		println("TRANSPORT TROLLEY | arrived to glass container")
		[# Position = "CONTAINERG" #]
		emit trolley_position : trolley_position(Position)
		println("TRANSPORT TROLLEY | settling glass")
		delay 300
		forward wasteservice -m withdrawal_done : withdrawal_done(DONE)
		[# Status = "IDLE" #]
		emit trolley_status : trolley_status(Status)
	}
	
	Goto move_to_HOME
	
	State move_to_HOME{
		printCurrentMessage
		println("TRANSPORTTROLLEY | coming back to HOME ")
		delay 500 
		println("TRANSPORTTROLLEY | arrived HOME")
		[# Position = "HOME" #]
		emit trolley_position : trolley_position(Position)
	}
	
	Goto s0
}
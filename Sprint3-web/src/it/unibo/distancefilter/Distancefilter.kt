/* Generated by AN DISI Unibo */ 
package it.unibo.distancefilter

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Distancefilter ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var DistanceLimit = 20;
				var Stopped = false;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("DistanceFilter STARTS")
					}
					 transition(edgeName="t111",targetState="handleSonarEvent",cond=whenEvent("sonardata"))
				}	 
				state("handleSonarEvent") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("distance(V)"), Term.createTerm("distance(V)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var Distance = payloadArg(0).toInt()
								if(  Distance <= DistanceLimit && !Stopped  
								 ){ Stopped = true  
								forward("stop", "stop($Distance)" ,"wasteservice" ) 
								println("emitted distance: $Distance, distance limit: $DistanceLimit STOP")
								}
								else
								 {if(  Distance > DistanceLimit && Stopped  
								  ){ Stopped = false  
								 forward("resume", "resume($Distance)" ,"wasteservice" ) 
								 println("emitted distance: $Distance, distance limit: $DistanceLimit RESUME")
								 }
								 }
						}
					}
					 transition(edgeName="t212",targetState="handleSonarEvent",cond=whenEvent("sonardata"))
				}	 
			}
		}
}

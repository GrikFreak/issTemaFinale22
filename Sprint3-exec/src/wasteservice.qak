System wasteservice

Request waste_request : waste_request(MATERIAL, TRUCKLOAD)
Reply loadaccept : loadaccept(MATERIAL, TRUCKLOAD)
Reply loadrejected : loadrejected(MATERIAL, TRUCKLOAD)

//Requests and replies from ws to tt
Request transfer_request : transfer_request(PATH_TO_DO)
Reply transfer_done : transfer_done(DONE)

Request pickup_request : pickup_request(MATERIAL)
Reply pickup_done : pickup_done(DONE)

Request storage_request : storage_request(ARG)
Reply storage_done : storage_done(DONE)

Request home_request : home_request(PATH_TO_HOME)
Reply home_done : home_done(DONE)

Request free_request : free_request(ARG)
Reply free_indoor : free_indoor(DONE)

//dispatch sent by ws to trolley to stop/resume it
Dispatch stop_trolley : stop_trolley(STOP)
Dispatch resume_trolley : resume_trolley(LASTSTATE)

//dispatch sent by distancefilter
Dispatch stop : stop(DISTANCE)
Dispatch resume : resume(OK)

Event alarm : alarm(STOP)

//Event containers_weight : containers_weight(GWEIGHT, PWEIGHT)

//Event TROLLEY_STATUS : TROLLEY_STATUS(STATUS)
//Event trolley_position : trolley_position(POSITION)

//sonar events
Event sonar : distance(V)   //emitted by sonarSimulator or sonardatasource	
Event sonardata : distance(V)   //for the application level

Dispatch led_status : led_status(STATUS)

//Per path executor
Request dopath : dopath(PATH)
Reply dopathdone : dopathdone(ARG)
Reply dopathfail : dopathfail(ARG)

//
//Event updateContainersWeight : updateContainersWeight(W_PLASTIC, W_GLASS)
//Event updateStatusLed : updateStatusLed(LED_STATUS)
//Event updateTrolleyStatus : updateTrolleyStatus(TROLLEY_STATUS)
//Event updateTrolleyPos : updateTrolleyPos(POSITION)

//event to simulate GUI receives something
//Event updateObserver : updateObserve(DATA)

Context ctxbasicrobot  ip [ host="127.0.0.1" port=8020 ]  

//Context ctxledqak22 ip [ host="127.0.0.1" port=8030 ]
Context ctxledqak22 ip [ host="192.168.1.123" port=8030 ] 

//Context ctxwasteserviceGUI ip [ host="localhost" port=8023 ]

//Context ctxWasteTruck ip [ host="localhost" port=8024 ]

Context ctxwasteservice ip [ host="localhost" port=8025 ]


ExternalQActor pathexec context ctxbasicrobot
ExternalQActor led context ctxledqak22

/*
QActor wasteserviceguimock context ctxwasteserviceGUI {
	State s0 initial {
		printCurrentMessage
		println("GUI | STARTED")
	}
	
	Transition t0 whenEvent updateContainersWeight -> updateGUI
					whenEvent updateStatusLed -> updateGUI
					whenEvent updateTrolleyStatus -> updateGUI
					whenEvent updateTrolleyPos -> updateGUI
	
	State updateGUI {
		printCurrentMessage
		onMsg(updateContainersWeight : updateContainersWeight(W_PLASTIC, W_GLASS)){
			[# var Weights = "" + payloadArg(0) + "," + payloadArg(1) #]
			emit updateObserver : updateObserver($Weights)
		}
		onMsg(updateStatusLed : updateStatusLed(LED_STATUS)){
			[# var Led_Status = payloadArg(0) #]
			emit updateObserver : updateObserver($Led_Status)
		}
		onMsg(updateTrolleyStatus : updateTrolleyStatus(TROLLEY_STATUS)){
			[# var TROLLEY_STATUS = payloadArg(0) #]
			emit updateObserver : updateObserver($TROLLEY_STATUS)
		}
		onMsg(updateTrolleyPos : updateTrolleyPos(TROLLEY_POSITION)){
				[# var Trolley_Pos = payloadArg(0) #]
			emit updateObserver : updateObserver($Trolley_Pos)
		}
	}
	
	Transition t1 whenEvent updateContainersWeight -> updateGUI
					whenEvent updateStatusLed -> updateGUI
					whenEvent updateTrolleyStatus -> updateGUI
					whenEvent updateTrolleyPos -> updateGUI
}

*/
/*
//we use a Mock, cause it's not an Actor
QActor wastetruckmock context ctxwasteservice {
	
	[#
		var Material 	= "";
		var TruckLoad 	= 0L;
		var Materials = arrayListOf<String>("glass", "plastic");
	#]
	
	State s0 initial {
		printCurrentMessage
		println("WASTETRUCK | starts.")
		delay 3000
		
		[# 
			val Load = kotlin.random.Random.nextLong(10,100) 
			val randomIndex = kotlin.random.Random.nextInt(Materials.size);
   			val Mat = Materials[randomIndex]
		#]
		
		request wasteservice -m waste_request : waste_request($Mat, $Load)
		println("WASTETRUCK | sent request of $Mat with load $Load.")
	}
	
	Transition t0 whenReply loadaccept -> accepted
				  whenReply loadrejected -> rejected 
				  
	State accepted {
		printCurrentMessage
		onMsg(loadaccept : loadaccept(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTETRUCK | accepted $Material with load $TruckLoad.")
			request wasteservice -m free_request : free_request(arg)
		}
	}
	
	Transition t1 whenReply free_indoor -> leave_Indoor
	
	State rejected {
		printCurrentMessage
		onMsg(loadrejected : loadrejected(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTETRUCK | rejected $Material load with weight $TruckLoad")
		}
	}
	
	Goto leave_Indoor
	
	State leave_Indoor {
		printCurrentMessage
		println("WASTETRUCK | WasteTruck left Indoor area.")
	}

	Goto s0
	
}
*/

QActor distancefilter context ctxwasteservice {
	
	[#
		var DistanceLimit = 20;
		var Stopped = false;
	#]
	
	State s0 initial{
		println("DistanceFilter STARTS")
	}
	
	Transition t1 whenEvent sonardata -> handleSonarEvent
	
	State handleSonarEvent {
		onMsg(sonardata: distance(V)){			
			[# 
				var Distance = payloadArg(0).toInt()
			#]
			if[# Distance <= DistanceLimit && !Stopped #]{
				[# Stopped = true #]
				forward wasteservice -m stop : stop($Distance)
				println("emitted distance: $Distance, distance limit: $DistanceLimit STOP")
			}else {
				if[# Distance > DistanceLimit && Stopped #]{
					[# Stopped = false #]
					forward wasteservice -m resume : resume($Distance)
					println("emitted distance: $Distance, distance limit: $DistanceLimit RESUME")
				}
			}
		}
	}
	
	Transition t2 whenEvent sonardata -> handleSonarEvent
}


QActor wasteservice context ctxwasteservice {
	
	[# 
		var MAXPB 	= 500L;
		var MAXGB 	= 500L;
		var CurrentPB = 0L;
		var CurrentGB = 0L;
		var Material = "";
		var PathHome = "";
		var PathIndoor = "";
		var PathContainer = "";
		val XIndoor = 0;
		val YIndoor = 4;
		val XContainerP = 6;
		val YContainerP = 4;
		val XContainerG = 6;
		val YContainerG = 0;
		val XHome = 0;
		val YHome = 0;
		
		var TrolleyStatus = "IDLE"; //IDLE, WORKING, STOPPED
		var TrolleyLastState = "HOME"; //HOME, TO_HOME, TO_CONTAINER, TO_INDOOR, PICKING, STORAGING
		var TrolleyPosition = "HOME"; //HOME, CONTAINER_P, CONTAINER_G, INDOOR, GENERIC
		
		var HandlingRequest = false;
	#]
	
	State init initial {
		printCurrentMessage
		println("WASTESERVICE | Start.")
		//run unibo.kotlin.planner22Util.createRoomMapFromTextfile( "map.txt" )	
   		run unibo.kotlin.planner22Util.initAI() 
  		run unibo.kotlin.planner22Util.showCurrentRobotState()
  		forward led -m led_status : led_status(OFF)
  		updateResource [# "READY" #]
  		//updateResource [# "LED:OFF" #]
  		//emit updateStatusLed : updateStatusLed(OFF)
	}
	
	Goto s0 
	
	State s0 {
		printCurrentMessage
		updateResource [# "TROLLEY_POS:HOME" #]
		updateResource [# "TROLLEY_STATUS:IDLE" #]
		println("WASTESERVICE | is waiting for a request..")
	}
	
	Transition t0 whenRequest waste_request -> go_to_Indoor	
					whenMsg stop -> handle_stop
			
	State go_to_Indoor {
		printCurrentMessage
		onMsg(waste_request : waste_request(MATERIAL, TRUCKLOAD)) {
			[#
				Material = payloadArg(0);
				var TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WASTESERVICE | arrived request: $Material with load $TruckLoad")
			if [# Material.equals("plastic") #] {
				if [# TruckLoad + CurrentPB <= MAXPB #]{
					replyTo waste_request with loadaccept : loadaccept($Material, $TruckLoad) 
					[# CurrentPB += TruckLoad #]
					[# HandlingRequest = true #]
					println("WASTESERVICE | current container plastic weight: $CurrentPB")
					
					run unibo.kotlin.planner22Util.setGoal(XIndoor,YIndoor) 
					[# PathIndoor = unibo.kotlin.planner22Util.doPlan().toString()
						.replace(" ","")
						.replace(",","")
						.replace("[","")
						.replace("]","")
					#]  
					
					request transporttrolley -m transfer_request : transfer_request($PathIndoor)
					//request transporttrolley -m pickup_request : pickup_request($PathIndoor, $Material)
					
					[# 
						TrolleyStatus = "WORKING";
						TrolleyLastState = "TO_INDOOR";
						TrolleyPosition = "GENERIC";
					#]
					forward led -m led_status : led_status(BLINKS)
					//emit updateStatusLed : updateStatusLed(BLINKS)
					//emit updateTrolleyPos : updateTrolleyPos(GENERIC)
					//emit updateTrolleyStatus : updateTrolleyStatus(WORKING)
					//updateResource [# "LED:BLINKS" #]
					updateResource [# "TROLLEY_POS:GENERIC" #]
					updateResource [# "TROLLEY_STATUS:WORKING" #]
					println("WASTESERVICE | Sent pickup request to TransportTrolley, indoor path $PathIndoor.")
				} else {
					replyTo waste_request with loadrejected : loadrejected($Material, $TruckLoad)
				}
			} else {
				if [# TruckLoad + CurrentGB <= MAXGB #]{
					replyTo waste_request with loadaccept : loadaccept($Material, $TruckLoad) 
					[# CurrentGB += TruckLoad #]
					[# HandlingRequest = true #]
					println("WASTESERVICE | current container glass weight: $CurrentGB")
					run unibo.kotlin.planner22Util.setGoal(XIndoor,YIndoor) 
					[# PathIndoor = unibo.kotlin.planner22Util.doPlan().toString()
						.replace(" ","")
						.replace(",","")
						.replace("[","")
						.replace("]","")
					#]  
					
					request transporttrolley -m transfer_request : transfer_request($PathIndoor)
					//request transporttrolley -m pickup_request : pickup_request($PathIndoor, $Material)
					
					[# 
						TrolleyStatus = "WORKING";
						TrolleyLastState = "TO_INDOOR";
						TrolleyPosition = "GENERIC";
					#]
					//emit TROLLEY_STATUS : TROLLEY_STATUS($TrolleyStatus)
					forward led -m led_status : led_status(BLINKS)
					//emit updateStatusLed : updateStatusLed(BLINKS)
					//emit updateTrolleyPos : updateTrolleyPos(GENERIC)
					//emit updateTrolleyStatus : updateTrolleyStatus(WORKING)
					//updateResource [# "LED:BLINKS" #]
					updateResource [# "TROLLEY_POS:GENERIC" #]
					updateResource [# "TROLLEY_STATUS:WORKING" #]
					println("WASTESERVICE | Sent pickup request to TransportTrolley, first path $PathIndoor")
					
				} else {
					replyTo waste_request with loadrejected : loadrejected($Material, $TruckLoad)
				}
			}
			//emit updateContainersWeight : updateContainersWeight($CurrentPB, $CurrentGB)
			updateResource [# "ContainersWeight:$CurrentPB, $CurrentGB" #]
		}
	}
	
	//Transition t1 whenReply pickup_done -> handle_storage 
					//whenMsg stop -> handle_stop
						
	Transition t1 whenReply transfer_done -> handle_pickup 
					whenRequest waste_request and [# HandlingRequest == false #]-> go_to_Indoor
					whenMsg stop -> handle_stop
					
	State handle_pickup {
		printCurrentMessage
		[# TrolleyPosition = "INDOOR" #]
		//emit updateTrolleyPos : updateTrolleyPos(INDOOR)
		updateResource [# "TROLLEY_POS:INDOOR" #]
		onMsg(transfer_done : transfer_done(ARG)){
			request transporttrolley -m pickup_request : pickup_request($Material)
		}
		[# TrolleyLastState = "PICKING"#]
	}
	
	Transition t2 whenRequest free_request -> handle_free_truck
	
	State handle_free_truck {
		printCurrentMessage
		onMsg(free_request : free_request(ARG)){
			println("WASTESERVICEeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee | Sent message to WasteTruck to leave indoor area.")
			replyTo free_request with free_indoor : free_indoor(done)
		}
	}
		
	
	Transition t3 whenReply pickup_done -> go_to_Container
					whenMsg stop -> handle_stop
	
	State go_to_Container {
		printCurrentMessage
		run  unibo.kotlin.planner22Util.updateMapWithPath(PathIndoor)
		run  unibo.kotlin.planner22Util.showCurrentRobotState()
		if [# Material.equals("plastic") #]{
			run unibo.kotlin.planner22Util.setGoal(XContainerP,YContainerP) 
			[# PathContainer = unibo.kotlin.planner22Util.doPlan().toString()
				.replace(" ","")
				.replace(",","")
				.replace("[","")
				.replace("]","")
			#]  
			[# TrolleyLastState = "TO_CONTAINER" #]
		} else {
			run unibo.kotlin.planner22Util.setGoal(XContainerG,YContainerG) 
			[# PathContainer = unibo.kotlin.planner22Util.doPlan().toString()
				.replace(" ","")
				.replace(",","")
				.replace("[","")
				.replace("]","")
			#]  
			[# TrolleyLastState = "TO_CONTAINER" #]
		}
		println("WASTESERVICE | send request to store to the transport trolley.")
		updateResource [# "TROLLEY_POS:GENERIC" #]
		request transporttrolley -m transfer_request : transfer_request($PathContainer)
		//request transporttrolley -m storage_request : storage_request($PathContainer)
	}
	
	Transition t4 whenReply transfer_done -> handle_storage
					whenMsg stop -> handle_stop
					
	State handle_storage {
		printCurrentMessage
		if [# Material.equals("plastic") #]{
			[# TrolleyPosition = "CONTAINER_P" #]
			//emit updateTrolleyPos : updateTrolleyPos(CONTAINER_P)
			updateResource [# "TROLLEY_POS:CONTAINER_P" #]
		} else {
			[# TrolleyPosition = "CONTAINER_G" #]
			//emit updateTrolleyPos : updateTrolleyPos(CONTAINER_G)
			updateResource [# "TROLLEY_POS:CONTAINER_G" #]
		}
		onMsg(transfer_done : transfer_done(ARG)){	
			run  unibo.kotlin.planner22Util.updateMapWithPath(PathContainer)
			run  unibo.kotlin.planner22Util.showCurrentRobotState()
			request transporttrolley -m storage_request : storage_request($Material)
		}
		[# TrolleyLastState = "STORAGING" #]

	}
	
	Transition t5 whenReply storage_done -> waiting_request
					whenMsg stop -> handle_stop
	
	State waiting_request {
		printCurrentMessage
		[# HandlingRequest = false #]
	}
	
	Transition t6 whenTime 100 -> go_to_Home
				whenRequest waste_request -> go_to_Indoor
				whenMsg stop -> handle_stop
				
	State go_to_Home {
		printCurrentMessage
		println("WASTESERVICE | No Queue, send Transport trolley to HOME")
		
		run unibo.kotlin.planner22Util.setGoal(XHome,YHome) 
		
		[#
		PathHome = unibo.kotlin.planner22Util.doPlan().toString() 
			.replace(" ","")
			.replace(",","")
			.replace("[","")
			.replace("]","")
		#]
		[# 
			TrolleyLastState = "TO_HOME";
		#]
		updateResource [# "TROLLEY_POS:GENERIC" #]
		request transporttrolley -m home_request : home_request($PathHome)
	}
	
	Transition t7 whenReply home_done -> back_to_Home
					whenMsg stop -> handle_stop
	
	State back_to_Home{
		printCurrentMessage
		println("WASTESERVICE | the trolley is arrived at HOME")
		[# 
			TrolleyStatus = "IDLE"
			TrolleyPosition = "HOME"
		#]
		//emit updateTrolleyPos : updateTrolleyPos(HOME)
		//emit updateTrolleyStatus : updateTrolleyStatus(IDLE)
		updateResource [# "TROLLEY_POS:HOME" #]
		updateResource [# "TROLLEY_STATUS:IDLE" #]
		onMsg(home_done : home_done(ARG)){
			forward led -m led_status : led_status(OFF)
			//emit updateStatusLed : updateStatusLed(OFF)
			//updateResource [# "LED:OFF" #]
			run  unibo.kotlin.planner22Util.updateMapWithPath(PathHome)
			run  unibo.kotlin.planner22Util.showCurrentRobotState()
		}
		//emit TROLLEY_STATUS : TROLLEY_STATUS($TrolleyStatus)
	}
	
	Goto s0
	
	State handle_stop {
		printCurrentMessage
		println("WASTESERVICE | Trolley stopped by the sonar, wait for resume..")
		[# TrolleyStatus = "STOPPED" #]
		//emit updateTrolleyStatus : updateTrolleyStatus(STOPPED)
		updateResource [# "TROLLEY_STATUS:STOPPED" #]
		forward transporttrolley -m stop_trolley : stop_trolley(STOP)
		forward led -m led_status : led_status(ON)
		//emit updateStatusLed : updateStatusLed(ON)
		//updateResource [# "LED:ON" #]
	} 
	
	Transition t8 whenMsg resume -> handle_resume
					
	State handle_resume {
		printCurrentMessage
		println("WASTESERVICE | resume trolley after sonar resume message.")
		[# TrolleyStatus = "WORKING" #]
		//emit updateTrolleyStatus : updateTrolleyStatus(WORKING)
		updateResource [# "TROLLEY_STATUS:WORKING" #]
		forward led -m led_status : led_status(BLINKS)
		//emit updateStatusLed : updateStatusLed(BLINKS)
		//updateResource [# "LED:BLINKS" #]
		//emit TROLLEY_STATUS : TROLLEY_STATUS(WORKING)
		forward transporttrolley -m resume_trolley : resume_trolley($TrolleyLastState)
		delay 300
	}
	
	Transition t9 whenTime 20000 -> s0
					whenReply transfer_done and [# TrolleyLastState == "TO_INDOOR" #] -> handle_pickup
				 	whenReply transfer_done and [# TrolleyLastState == "TO_CONTAINER" #] -> handle_storage
				  	whenReply home_done -> back_to_Home
					whenReply pickup_done -> go_to_Container
		 			whenReply storage_done -> waiting_request
					whenMsg stop -> handle_stop
					
	
}

QActor transporttrolley context ctxwasteservice {
	
	[#
		var Status	= "IDLE";	
		var Position = "HOME";
		var Material = "";
		var PathHome = "";
		var PathIndoor = "";
		var PathContainer = "";
		
		var PathToDo = "";
		var LastState = "";
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the TransportTrolley is waiting..")
		[# LastState = "HOME" #]
	}
	
	Transition t0 whenRequest transfer_request -> move_to_INDOOR
					whenMsg stop_trolley -> trolley_stopped
	
	State move_to_INDOOR {
		printCurrentMessage
		onMsg(transfer_request : transfer_request(PATH_TO_INDOOR)){
		 	[# 
		 		PathIndoor = payloadArg(0)
		 	#]
			println("TRANSPORT TROLLEY | execute the path $PathIndoor to INDOOR.")
		 	request pathexec -m dopath : dopath($PathIndoor)
		}
		onMsg (dopathdone : dopathdone(ARG)) {
			println("TRANSPORT TROLLEY | arrived to INDOOR.")
			replyTo transfer_request with transfer_done : transfer_done(DONE)
		}
		onMsg(dopathfail : dopathfail(ARG)) {
			[#
				var PathToDo = payloadArg(0)
			#]
			if [# PathToDo.length != 0  && PathToDo.length != 1 #]{
				println("TRANSPORT TROLLEY | RESUME, path to do: $PathToDo")
				request pathexec -m dopath : dopath($PathToDo) 
			} else {
				[# PathToDo = "" #]
				println("TRANSPORT TROLLEY | RESUME")
				request pathexec -m dopath : dopath($PathToDo) 
			}
		}
	}
	
	Transition t1 whenReply dopathdone -> move_to_INDOOR
					whenReply dopathfail -> move_to_INDOOR
				  	whenMsg stop_trolley -> handle_path
					whenRequest pickup_request -> pickup_action
					  
	State pickup_action {
		printCurrentMessage
		onMsg(pickup_request : pickup_request(ARG)){
			delay 1000
			replyTo pickup_request with pickup_done : pickup_done(arg)
		}
		/* onMsg (dopathdone : dopathdone(ARG)) {
			println("TRANSPORT TROLLEY | arrived to Container")
			replyTo pickup_request with pickup_done : pickup_done(arg)
		} */
	}
	
	Transition t2 whenRequest transfer_request -> move_to_CONTAINER
			  		whenMsg stop_trolley -> trolley_stopped
	
	State move_to_CONTAINER{
		printCurrentMessage
		onMsg(transfer_request : transfer_request(PATH_TO_CONTAINER)){
		 	[# 
		 		PathContainer = payloadArg(0)
		 	#]
		 	println("TRANSPORT TROLLEY | execute the path $PathContainer to $Material container ")
			//emit TROLLEY_STATUS : TROLLEY_STATUS($Status)
			request pathexec -m dopath : dopath($PathContainer) 
			[# LastState = "TO_CONTAINER" #]
		}
		onMsg (dopathdone : dopathdone(ARG)) {
			println("TRANSPORT TROLLEY | arrived to Container")
			replyTo transfer_request with transfer_done : transfer_done(DONE)	
		}
		onMsg(dopathfail : dopathfail(ARG)) {
			[#
				var PathToDo = payloadArg(0)
			#]
			if [# PathToDo.length != 0  && PathToDo.length != 1 #]{
				request pathexec -m dopath : dopath($PathToDo) 
			} else {
				[# PathToDo = "" #]
				request pathexec -m dopath : dopath($PathToDo) 
			}
		}
	}
	
	Transition t3 whenReply dopathdone -> move_to_CONTAINER
				  	whenReply dopathfail -> move_to_CONTAINER
				  	whenMsg stop_trolley -> handle_path
				  	whenRequest storage_request -> storage_action
				  	
	State storage_action{
		printCurrentMessage
		onMsg(storage_request : storage_request(ARG)){
			delay 1000
			println("TRANSPORT TROLLEY | arrived storage request from WS")
			replyTo storage_request with storage_done : storage_done(arg)
		}
		/* onMsg (dopathdone : dopathdone(ARG)) {
			println("TRANSPORT TROLLEY | arrived to Container")
			replyTo storage_request with storage_done : storage_done(arg)
		} */
	}
	
	Transition t4 whenRequest home_request -> move_to_HOME
					whenRequest transfer_request -> move_to_INDOOR
					whenMsg stop_trolley -> trolley_stopped
	
	State move_to_HOME{
		printCurrentMessage
		onMsg(home_request : home_request(PATH_TO_HOME)){
		 	[# 
		 		PathHome = payloadArg(0)
		 	#]
			println("TRANSPORT TROLLEY | execute the path $PathHome to HOME.")
		 	request pathexec -m dopath : dopath($PathHome)
		}
		onMsg(dopathdone : dopathdone(ARG)) {
			println("TRANSPORT TROLLEY | arrived HOME.")
			replyTo home_request with home_done : home_done(DONE)
		}
		onMsg(dopathfail : dopathfail(ARG)) {
			[#
				var PathToDo = payloadArg(0)
			#]
			if [# PathToDo.length != 0  && PathToDo.length != 1 #]{
				//println("TRANSPORT TROLLEY | RESUME, path to do: $PathToDo")
				replyTo home_request with home_done : home_done(DONE)
			} else {
				//println("TRANSPORT TROLLEY | RESUME")
				request pathexec -m dopath : dopath($PathToDo) 
			}
		}
	}
	
	Transition t5 whenReply dopathdone -> move_to_HOME
				  	whenReply dopathfail -> move_to_HOME
				  	whenMsg stop_trolley -> handle_path
				  	whenRequest transfer_request -> move_to_INDOOR
	  
	State handle_path {
		printCurrentMessage
		println("TRANSPORT TROLLEY | SEND ALARM TO BASICROBOt.")
		emit alarm : alarm(STOP)	
		//[# TrolleyStatus = "STOPPED" #]
		//emit TROLLEY_STATUS : TROLLEY_STATUS(STOPPED)
	} 
	
	Transition t7 whenReply dopathfail -> savepath 
					whenReply dopathdone -> trolley_stopped
	
	State savepath {
		printCurrentMessage
		onMsg(dopathfail: dopathfail(PATH)){
			[#
				PathToDo = payloadArg(0);
			#]	
		}
		//println("TRANSPORT TROLLEY | SAVE PATH: $PathToDo")
	} 
	
	Goto trolley_stopped
	
	State trolley_stopped {
		printCurrentMessage
		//println("TRANSPORT TROLLEY | STOPPED")
		//[# TrolleyStatus = "STOPPED" #]
		//emit led_status : led_status(ON)
		//emit TROLLEY_STATUS : TROLLEY_STATUS(STOPPED)
	}
	
	Transition t7 whenMsg resume_trolley -> handle_resume
					
	State handle_resume {
		printCurrentMessage
		onMsg(resume_trolley : resume_trolley(ARG)){
			[#
				LastState = payloadArg(0);
			#]	
			println("TRANSPORT TROLLEY | resume_trolley, need to do: $PathToDo.")
			if [# PathToDo.equals("none") #]{
				[# PathToDo = "" #]
				//println("TRANSPORT TROLLEY | RESUME, path to do: $PathToDo")
				request pathexec -m dopath : dopath($PathToDo) 
			} else {
				request pathexec -m dopath : dopath($PathToDo) 
			}
		}
		onMsg(dopathfail : dopathfail(ARG)) {
			[#
				var PathToDo = payloadArg(0)
			#]
			if [# PathToDo.length != 0 && PathToDo.length != 1 #]{
				//println("TRANSPORT TROLLEY | RESUME, path to do: $PathToDo")
				request pathexec -m dopath : dopath($PathToDo) 
			} else {
				[# PathToDo = "" #]
				//println("TRANSPORT TROLLEY | RESUME")
				request pathexec -m dopath : dopath($PathToDo) 
			}
		}
	}
	
	Transition t8 whenReply dopathdone and [# LastState == "TO_INDOOR" #] -> move_to_INDOOR
				  whenReply dopathdone and [# LastState == "PICKING" #] -> pickup_action
				  whenReply dopathdone and [# LastState == "TO_CONTAINER" #] -> move_to_CONTAINER
				  whenReply dopathdone and [# LastState == "STORAGING" #] -> storage_action
				  whenReply dopathdone and [# LastState == "TO_HOME" #] -> move_to_HOME
				  whenReply dopathdone and [# LastState == "HOME" #] -> s0
				  whenReply dopathfail -> handle_resume
				  whenMsg stop_trolley -> trolley_stopped
}

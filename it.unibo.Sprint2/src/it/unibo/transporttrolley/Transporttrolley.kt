/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Status	= "IDLE";	
				var Position = "HOME";
				var Material = "";
				var PathHome = "";
				var PathIndoor = "";
				var PathContainer = "";
				
				var PathToDo = ""
				var LastState = ""
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("the TransportTrolley is waiting..")
						emit("start_sonar", "start_sonar(START)" ) 
					}
					 transition(edgeName="t09",targetState="move_to_INDOOR",cond=whenRequest("pickup_request"))
					transition(edgeName="t010",targetState="handle_alarm",cond=whenEvent("sonar_alarm"))
				}	 
				state("move_to_INDOOR") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("pickup_request(PATH_TO_INDOOR,MATERIAL)"), Term.createTerm("pickup_request(PATH_TO_INDOOR,MATERIAL)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
										 		PathIndoor = payloadArg(0)
										 		Material = payloadArg(1)
						}
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TRANSPORT TROLLEY | execute the path $PathIndoor to INDOOR.")
						request("dopath", "dopath($PathIndoor)" ,"pathexec" )  
						 Status = "WORKING"  
						 Position = "GENERIC"  
						emit("led_status", "led_status(BLINKS)" ) 
						emit("trolley_status", "trolley_status($Status)" ) 
						emit("trolley_position", "trolley_position($Position)" ) 
						 LastState = "to_INDOOR"  
					}
					 transition(edgeName="t111",targetState="handle_alarm",cond=whenEvent("sonar_alarm"))
					transition(edgeName="t112",targetState="pickup_action",cond=whenReply("dopathdone"))
					transition(edgeName="t113",targetState="pathfail",cond=whenReply("dopathfail"))
				}	 
				state("pickup_action") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dopathdone(ARG)"), Term.createTerm("dopathdone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(3000) 
								unibo.kotlin.planner22Util.updateMapWithPath( PathIndoor  )
								unibo.kotlin.planner22Util.showCurrentRobotState(  )
								println("TRANSPORT TROLLEY | arrived to INDOOR.")
								 Position = "INDOOR"  
								emit("led_status", "led_status(BLINKS)" ) 
								emit("trolley_position", "trolley_position($Position)" ) 
								answer("pickup_request", "pickup_done", "pickup_done(DONE)"   )  
								println("TRANSPORT TROLLEY | pick up done.")
						}
					}
					 transition(edgeName="t214",targetState="move_to_Container",cond=whenRequest("storage_request"))
				}	 
				state("pathfail") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TRANSPORT TROLLEY| Error: Path fail!")
					}
				}	 
				state("move_to_Container") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						if( checkMsgContent( Term.createTerm("storage_request(PATH_TO_CONTAINER)"), Term.createTerm("storage_request(PATH_TO_CONTAINER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
										 		PathContainer = payloadArg(0)
						}
						println("TRANSPORT TROLLEY | execute the path $PathContainer to $Material container ")
						 Status = "WORKING"  
						emit("led_status", "led_status(BLINKS)" ) 
						emit("trolley_status", "trolley_status($Status)" ) 
						request("dopath", "dopath($PathContainer)" ,"pathexec" )  
						 LastState = "to_CONTAINER"  
					}
					 transition(edgeName="t315",targetState="handle_alarm",cond=whenEvent("sonar_alarm"))
					transition(edgeName="t316",targetState="settle_action",cond=whenReply("dopathdone"))
					transition(edgeName="t317",targetState="pathfail",cond=whenReply("dopathfail"))
				}	 
				state("settle_action") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("dopathdone(ARG)"), Term.createTerm("dopathdone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								delay(3000) 
								unibo.kotlin.planner22Util.updateMapWithPath( PathContainer  )
								unibo.kotlin.planner22Util.showCurrentRobotState(  )
								println("TRANSPORT TROLLEY | arrived to $Material container")
								if(  Material.equals("plastic") 
								 ){ Position = "CONTAINERP"  
								}
								else
								 { Position = "CONTAINERG"  
								 }
						}
						emit("led_status", "led_status(ON)" ) 
						emit("trolley_position", "trolley_position($Position)" ) 
						 Status = "IDLE"  
						emit("trolley_status", "trolley_status($Status)" ) 
						unibo.kotlin.planner22Util.showCurrentRobotState(  )
						delay(1500) 
						println("TRANSPORT TROLLEY | settled $Material on the Container.")
						answer("storage_request", "storage_done", "storage_done(DONE)"   )  
					}
					 transition(edgeName="t418",targetState="move_to_INDOOR",cond=whenRequest("pickup_request"))
					transition(edgeName="t419",targetState="move_to_HOME",cond=whenRequest("home_request"))
				}	 
				state("move_to_HOME") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TRANSPORT TROLLEY | coming back to HOME ")
						if( checkMsgContent( Term.createTerm("home_request(PATH_TO_HOME)"), Term.createTerm("home_request(PATH_TO_HOME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												PathHome = payloadArg(0)
								request("dopath", "dopath($PathHome)" ,"pathexec" )  
								delay(1500) 
						}
						if( checkMsgContent( Term.createTerm("dopathdone(ARG)"), Term.createTerm("dopathdone(ARG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								println("TRANSPORT TROLLEY | arrived HOME.")
								 Position = "HOME"  
								emit("led_status", "led_status(OFF)" ) 
								unibo.kotlin.planner22Util.showCurrentRobotState(  )
								emit("trolley_position", "trolley_position($Position)" ) 
								answer("home_request", "home_done", "home_done(DONE)"   )  
						}
					}
					 transition(edgeName="t520",targetState="move_to_HOME",cond=whenReply("dopathdone"))
					transition(edgeName="t521",targetState="pathfail",cond=whenReply("dopathfail"))
					transition(edgeName="t522",targetState="move_to_INDOOR",cond=whenRequest("pickup_request"))
				}	 
				state("handle_alarm") { //this:State
					action { //it:State
						println("TRANSPORT TROLLEY | Stopped by sonar")
						emit("led_status", "led_status(ON)" ) 
					}
					 transition(edgeName="t623",targetState="pickup_action",cond=whenEventGuarded("sonar_resume",{ LastState == "to_INDOOR"  
					}))
					transition(edgeName="t624",targetState="settle_action",cond=whenEventGuarded("sonar_resume",{ LastState == "to_CONTAINER"  
					}))
				}	 
			}
		}
}

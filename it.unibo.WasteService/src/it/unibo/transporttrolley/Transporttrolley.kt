/* Generated by AN DISI Unibo */ 
package it.unibo.transporttrolley

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Transporttrolley ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		
				var Trolley_Status	= "IDLE";	
				var Position = "HOME";
				var Material = "";
				var TruckLoad = 0L ; 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("the transportTrolley is waiting..")
					}
					 transition(edgeName="t07",targetState="move_to_INDOOR",cond=whenDispatch("execute"))
					transition(edgeName="t08",targetState="stop_trolley",cond=whenDispatch("stop"))
					transition(edgeName="t09",targetState="resume_trolley",cond=whenDispatch("resume"))
				}	 
				state("move_to_INDOOR") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("execute(MATERIAL,TRUCKLOAD)"), Term.createTerm("execute(MATERIAL,TRUCKLOAD)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	Material = payloadArg(0)
										 		TruckLoad = payloadArg(1).toLong() 
						}
						println("$name in ${currentState.stateName} | $currentMsg")
						println("transportTrolley | moving to INDOOR")
						 Trolley_Status = "WORKING"  
						 Position = "GENERIC"  
						emit("trolley_status", "trolley_status($Trolley_Status)" ) 
						emit("trolley_position", "trolley_position($Position)" ) 
						delay(500) 
						println("transportTrolley | arrived to INDOOR")
						println("transportTrolley | picking up $Material of load $TruckLoad")
						 Position = "INDOOR"  
						emit("trolley_position", "trolley_position($Position)" ) 
						delay(500) 
						println("transportTrolley | picked up, send end action to WS.")
						forward("withdrawal_done", "withdrawal_done(DONE)" ,"wasteservice" ) 
					}
					 transition( edgeName="goto",targetState="move_to_ContainerP", cond=doswitchGuarded({ Material.equals("plastic")  
					}) )
					transition( edgeName="goto",targetState="move_to_ContainerG", cond=doswitchGuarded({! ( Material.equals("plastic")  
					) }) )
				}	 
				state("move_to_ContainerP") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("transportTrolley | moving to plastic container ")
						 Position = "GENERIC"  
						emit("trolley_position", "trolley_position($Position)" ) 
						delay(500) 
						println("transportTrolley | arrived to plastic container")
						 Position = "CONTAINERP"  
						emit("trolley_position", "trolley_position($Position)" ) 
						println("transportTrolley | settling plastic")
						 Trolley_Status = "IDLE"  
						emit("trolley_status", "trolley_status($Trolley_Status)" ) 
						delay(300) 
					}
					 transition( edgeName="goto",targetState="move_to_HOME", cond=doswitch() )
				}	 
				state("move_to_ContainerG") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("transportTrolley | moving to glass container ")
						 Position = "GENERIC"  
						emit("trolley_position", "trolley_position($Position)" ) 
						delay(500) 
						println("transportTrolley | arrived to glass container")
						 Position = "CONTAINERG"  
						emit("trolley_position", "trolley_position($Position)" ) 
						println("transportTrolley | settling glass")
						 Trolley_Status = "IDLE"  
						emit("trolley_status", "trolley_status($Trolley_Status)" ) 
						delay(300) 
					}
					 transition( edgeName="goto",targetState="move_to_HOME", cond=doswitch() )
				}	 
				state("move_to_HOME") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("transportTrolley | coming back to HOME ")
						delay(500) 
						println("transportTrolley | arrived HOME")
						 Position = "HOME";
										
						emit("trolley_position", "trolley_position($Position)" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("stop_trolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TransportTrolley | the transport_trolley has been stopped.")
						 Trolley_Status = "STOPPED"  
						emit("trolley_status", "trolley_status($Trolley_Status)" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("resume_trolley") { //this:State
					action { //it:State
						println("$name in ${currentState.stateName} | $currentMsg")
						println("TransportTrolley | the transport_trolley has been resumed.")
						 Trolley_Status = "WORKING"  
						emit("trolley_status", "trolley_status($Trolley_Status)" ) 
					}
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
			}
		}
}

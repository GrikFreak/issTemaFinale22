System wasteservice

Request waste_request : waste_request(MATERIAL, TRUCKLOAD)
Reply loadaccept : loadaccept(MATERIAL, TRUCKLOAD)
Reply loadrejected : loadrejected(MATERIAL, TRUCKLOAD)

Dispatch free_Indoor : free_Indoor(FREE)
Dispatch execute : execute(MATERIAL,TRUCKLOAD)
Dispatch withdrawal_done : withdrawal_done(DONE)

Event containers_weight : containers_weight(GWEIGHT, PWEIGHT)

Event trolley_status : trolley_status(TROLLEY_STATUS)
Event trolley_position : trolley_position(POSITION)

Event change_led : change_led(LED_STATUS)
Event led_status : led_status(LED_STATUS)
 
Dispatch stop : stop(DISTANCE)
Dispatch resume : resume(DISTANCE) 

Context ctxWasteService ip [ host="localhost" port=8025 ]

QActor wastetruck context ctxWasteService {
	
	[#
		var Material 	= "";
		var TruckLoad 	= 0L;
		var Count = 0L;
		var Materials = arrayListOf<String>("glass", "plastic");
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the WasteTruck is waiting..")
		delay 100
		
		[# 	val Load = kotlin.random.Random.nextLong(10,100)
			val Mat = Materials[kotlin.random.Random.nextInt(1,2)]
			Count += 1 
		#]
		request wasteservice -m waste_request : waste_request($Mat, $Load)
		println("WasteTruck | sent request NR : $Count of  $Material load with weight $Load")
	}
	
	Transition t0 whenReply loadaccept -> accepted
				  whenReply loadrejected -> rejected 
				  
	State accepted {
		printCurrentMessage
		onMsg(loadaccept : loadaccept(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WasteTruck | accepted $Material load with weight $TruckLoad")
		}
	}
	
	Transition t1 whenMsg free_Indoor -> leave_Indoor
	
	State rejected {
		printCurrentMessage
		onMsg(loadrejected : loadrejected(MATERIAL, TRUCKLOAD)) {
			[#
				Material 	= payloadArg(0);
				TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WasteTruck | rejected $Material load with weight $TruckLoad")
		}
	}
	
	Goto leave_Indoor
	
	State leave_Indoor {
		println("WASTETRUCK | WasteTruck left Indoor area.")
	}

	Goto s0 if [# Count <= 2  #] else  s1
	
	State s1 {
		println("Waste Truck | FINE RICHIESTE")
	}
	
}

QActor wasteservice context ctxWasteService {
	
	[# 
		var MAXPB = 500L;
		var MAXGB = 500L;
		var CurrentPB = 0L;
		var CurrentGB = 0L;
		var Trolley_Status = "IDLE"; 
		

	#]
	
	State s0 initial {
		printCurrentMessage
		println("the WasteService is waiting..")
	}
	
	Transition t0 whenRequest waste_request -> handle_request
				  whenEvent trolley_status -> handle_led
				  whenEvent trolley_position -> handle_led
				 // whenEvent trolley_status -> handle_request
				  
	State handle_request {
		printCurrentMessage
		onMsg(waste_request : waste_request(MATERIAL, TRUCKLOAD)) {
			[#
				var Material 	= payloadArg(0);
				var TruckLoad 	= payloadArg(1).toLong();
			#]
			println("WasteService | arrived request: $Material load with weight $TruckLoad")
			
			if [# Trolley_Status.equals("IDLE") || Trolley_Status.equals("MOVING") || Trolley_Status.equals("WORKING") #]{
				if [# Material.equals("plastic") #] {
					if [# TruckLoad + CurrentPB <= MAXPB #]{
						replyTo waste_request with loadaccept : loadaccept(plastic, $TruckLoad) 
						[# CurrentPB += TruckLoad #]
						println("WasteService | current plastic weight: $CurrentPB")
						forward transporttrolley -m execute : execute(plastic,$TruckLoad)
						println("WasteService | send EXECUTE   to the Transport Trolley")
					} else {
						replyTo waste_request with loadrejected : loadrejected(plastic, $TruckLoad)
					}
				} else {
					if [# TruckLoad + CurrentGB <= MAXGB #]{
						replyTo waste_request with loadaccept : loadaccept(glass, $TruckLoad) 
						[# CurrentGB += TruckLoad #]
						println("WasteService | current glass weight: $CurrentGB")
						forward transporttrolley -m execute : execute(glass,$TruckLoad)
						println("WasteService | send EXECUTE   to the Transport Trolley")
					} else {
						replyTo waste_request with loadrejected : loadrejected(glass, $TruckLoad)
					}
				}
				emit containers_weight : containers_weight($CurrentGB, $CurrentPB)
			
				}else {
					println("Richiesta messa in coda")	
				}
			}
		}
	
	
	Transition t1 whenMsg withdrawal_done -> send_Done 
	
	State send_Done {
		printCurrentMessage
		forward wastetruck -m free_Indoor : free_Indoor(FREE)
		println("WASTESERVICE | Sent message to wt to leave indoor area.")
	}
	
	Goto s0
	
	State handle_led {
		printCurrentMessage
		onMsg(trolley_status : trolley_status(TROLLEY_STATUS)){
			[# Trolley_Status = payloadArg(0) #]
			
			if [# Trolley_Status.equals("WORKING") #]{
				println("WasteService | Received new trolley_status: $Trolley_Status")
				[# var Led_Status = "LED_BLINKS" #]
				emit change_led : change_led($Led_Status)
			} 
			if [# Trolley_Status.equals("STOPPED") #]{
				println("WasteService | Received new trolley_status: $Trolley_Status")
				[# var Led_Status = "LED_ON" #]
				emit change_led : change_led($Led_Status)
			} 
		}
		onMsg(trolley_position : trolley_position(TROLLEY_POSITION)){
			[# var Trolley_Position = payloadArg(0) #]
			
			if [# Trolley_Position.equals("HOME") #]{
				println("WasteService | Received new trolley_position: $Trolley_Position")
				[# var Led_Status = "LED_OFF" #]
				emit change_led : change_led($Led_Status)
			} 
		}
	}
	
	Goto s0
	
}

QActor transporttrolley context ctxWasteService {
	
	[#
		var Trolley_Status	= "IDLE";	
		var Position = "HOME";
		var Material = "";
		var TruckLoad = 0L ; 
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the transportTrolley is waiting..")	
	}
	
	Transition t0 whenMsg execute -> move_to_INDOOR
				  whenMsg stop -> stop_trolley
				  whenMsg resume -> resume_trolley
				  
	State move_to_INDOOR {
		onMsg(execute : execute(MATERIAL,TRUCKLOAD)){
		 	[# 	Material = payloadArg(0)
		 		TruckLoad = payloadArg(1).toLong() 
		 	#]
		}
		printCurrentMessage
		println("transportTrolley | moving to INDOOR")
		[# Trolley_Status = "WORKING" #]
		[# Position = "GENERIC" #]
		emit trolley_status : trolley_status($Trolley_Status)
		emit trolley_position : trolley_position($Position)
		delay 500 
		println("transportTrolley | arrived to INDOOR")
		println("transportTrolley | picking up $Material of load $TruckLoad")
		[# Position = "INDOOR" #]
		emit trolley_position : trolley_position($Position)
		delay 500
		println("transportTrolley | picked up, send end action to WS.")
		forward wasteservice -m withdrawal_done : withdrawal_done(DONE)
		
	}
		
	Goto move_to_ContainerP if [# Material.equals("plastic") #] else move_to_ContainerG
	
	State move_to_ContainerP{
		printCurrentMessage
		println("transportTrolley | moving to plastic container ")
		[# Position = "GENERIC" #]
		emit trolley_position : trolley_position($Position)
		delay 500 
		println("transportTrolley | arrived to plastic container")
		[# Position = "CONTAINERP" #]
		emit trolley_position : trolley_position($Position)
		println("transportTrolley | settling plastic")
		[# Trolley_Status = "IDLE" #]
		emit trolley_status : trolley_status($Trolley_Status)
		delay 300
		
	}
	
	Goto move_to_HOME
	
	State move_to_ContainerG{
		printCurrentMessage
		println("transportTrolley | moving to glass container ")
		[# Position = "GENERIC" #]
		emit trolley_position : trolley_position($Position)
		delay 500 
		println("transportTrolley | arrived to glass container")
		[# Position = "CONTAINERG" #]
		emit trolley_position : trolley_position($Position)
		println("transportTrolley | settling glass")
		[# Trolley_Status = "IDLE" #]
		emit trolley_status : trolley_status($Trolley_Status)
		delay 300

	}
	
	Goto move_to_HOME
	
	State move_to_HOME{
		printCurrentMessage
		println("transportTrolley | coming back to HOME ")
		delay 500 
		println("transportTrolley | arrived HOME")
		[# Position = "HOME";
				
		#]
		emit trolley_position : trolley_position($Position)
		
	}
	
	Goto s0 
	
	State stop_trolley {
		printCurrentMessage
		println("TransportTrolley | the transport_trolley has been stopped.")
		[# Trolley_Status = "STOPPED" #]
		emit trolley_status : trolley_status($Trolley_Status)
	}
	
	Goto s0
	
	State resume_trolley {
		printCurrentMessage
		println("TransportTrolley | the transport_trolley has been resumed.")
		[# Trolley_Status = "WORKING" #]
		emit trolley_status : trolley_status($Trolley_Status)
	}
	
	Goto s0
}

QActor led context ctxWasteService {
	
	[#
		var Led_Status	= "LED_OFF";
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the Led is ready..")
	}
	
	Transition t0 whenEvent change_led -> change_status
				  
	State change_status {
		printCurrentMessage
		onMsg(change_led : change_led(LED_STATUS)){
			[# Led_Status = payloadArg(0) #]
			println("Led | led status changed in: $Led_Status")
			emit led_status : led_status($Led_Status)
		}
	}	
	
	Goto s0
}

QActor sonar context ctxWasteService {
	
	[#
		var DLIMIT = 30L;
		var Stopped = false;
	#]
	
	State s0 initial {
		printCurrentMessage
		println("the sonar is active..")
	}
		
	Transition t0 whenTime 100 -> detect
				  
	State detect {
		
		[# val Distance = kotlin.random.Random.nextLong(10,100) #]
		println("SONAR | Detected distance $Distance")
		if [# Distance <= DLIMIT && !Stopped #]{
			forward transporttrolley -m stop : stop(Distance)
			[# Stopped = true #]
			println("SONAR | stop")
		}
		if [# Distance > DLIMIT && Stopped #]{
			forward transporttrolley -m resume : resume(Distance)
			[# Stopped = false #]
			println("SONAR | resume")
		}
	}
	
	Goto s0	
}

/*
 * sonarqak22
 * Usa MQTT
 */

System /*-trace*/ sonarqak22
mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/sonarqak22"
 
Dispatch sonar_alarm  : sonar_alarm(STOP)
Dispatch sonar_resume  : sonar_resume(OK)
Dispatch start_sonar : start_sonar(START)
Event alarm : alarm(KO)
 
Context ctxWasteService ip [ host="10.5.5.1" port=8025 ]  

Context ctxsonarqak22 ip [host="localhost" port=8085]  

ExternalQActor wastetruckmock context ctxWasteService

QActor sonarqak22 context ctxsonarqak22{
	[# var stopped = false; #]
	State s0 initial {
		println("Sonar STARTS")
		
	}
	
	Transition t0 whenMsg start_sonar -> active
	
	State active {
		[#
			var Distance = kotlin.random.Random.nextLong(1,1000);
			
		#]
		if [# Distance <= 90 /* && !stopped */ #]{
			println("SONAR | send sonar_alarm")
			forward wastetruckmock -m sonar_alarm : sonar_alarm(STOP)
			printCurrentMessage
			[# stopped = true #]
			println("SONAR | stop with distance $Distance")
		 } /*else{
			if [# Distance > 90 && stopped #]{
				forward wasteservice -m sonar_resume : sonar_resume(OK)
				[# stopped = false #]
				println("SONAR | resume with distance $Distance")
			}
		} */
	}
	
	Transition t1 whenTime 1000 -> active
	
}

QActor sonarmock context ctxsonarqak22 {
	State s0 initial {
		println("SONARMOCK | Mock started the sonar")
		forward sonarqak22 -m start_sonar : start_sonar(START)
	}
	
	Transition t0 whenTime 1000000000 -> turn_off
	
	State turn_off {
		println("SONARMOCK | Turned off the sonar")
	}
}

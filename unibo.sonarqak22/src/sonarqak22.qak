/*
 * sonarqak22
 * Usa MQTT
 */
 
 
 
 /*    implementation name: 'uniboInterfaces'
    implementation name: '2p301'
    implementation name: 'it.unibo.qakactor-2.7'
    implementation name: 'unibonoawtsupports'  //required by the old infrastructure
	implementation name: 'unibo.actor22-1.1'
	implementation name: 'it.unibo.radarSystem22.domain-1.0'
	//
	implementation name: 'unibo.comm22-1.1'
	implementation name: 'it.unibo.comm2022-2.0' */ 

System /*-trace*/ sonarqak22
//mqttBroker "broker.hivemq.com" : 1883  eventTopic "unibo/sonarqak22"


//SONAR 
Dispatch sonaractivate   : info(ARG)
Dispatch sonardeactivate : info(ARG)
Event    sonar           : distance( V )   //emitted by sonarSimulator or sonardatasource (es.sonarHCSR04Support2021)
Event    sonardata       : distance( V )   //for the application level
Event obstacle : obstacle(V)
Event noobstacle : noobstacle(V)

// mettere ip del proprio pc (o raspberry)
Context ctxwasteservice ip [host="192.168.1.114" port=8025]  
//Context ctxwasteservice ip [host="127.0.0.1" port=8025]  
Context ctxsonarqak22 ip [host="localhost" port=8035] 

ExternalQActor wasteservice context ctxwasteservice

//DATA SOURCES
CodedQActor sonarsimulator  context ctxsonarqak22 className "sonarSimulator"  
CodedQActor sonardatasource context ctxsonarqak22 className "sonarHCSR04Support2021"

/*
 * Actors for the sonar-data handling pipe
 * NOTE : we do not use the it.unibo`.radarSystem22.domain
 * we could do it by introducing an observer that emits the event
 */

CodedQActor datacleaner    context ctxsonarqak22 className "dataCleaner"
// CodedQActor distancefilter context ctxsonarqak22 className "distanceFilter"


QActor sonarqak22 context ctxsonarqak22{
	[# val simulate       = false
	   val sonarActorName = "sonarqak22"
	   val usingDomain    = false
	#]
	State s0 initial {
		//printCurrentMessage
		run  sonarConfig.configureTheSonar(simulate, sonarActorName, usingDomain)
		 
		//ASSUMPTION: the sonar subsystem emits the event sonar:distance(V)
	}
	Transition t0 whenMsg sonaractivate   -> activateTheSonar
			      whenMsg sonardeactivate -> deactivateTheSonar
	
	State activateTheSonar{
		printCurrentMessage
		if[# simulate #]{
			forward sonarsimulator -m sonaractivate : info(ok) 
			//run sonarConfig.activateSonarSimulated() //usingDomain
		}else {
			 forward sonardatasource -m sonaractivate : info(ok)  
		}
	}
	Transition t0  whenEvent sonar         -> handleSonarData  
	               whenMsg sonardeactivate -> deactivateTheSonar
	
	State deactivateTheSonar{
		printCurrentMessage
	}
	Goto end
 
  	State handleSonarData{
  		 onMsg( sonar : distance(D) ){
   		 	[# val D = payloadArg(0) #]  
  		    //println("%%%%%%%%%%%%%%%%%%%%%%%%%%% emit %%%%%%%%%%%%%%% ${D}")
  		 	emit sonardata : distance($D) //for the application
  		 	println("Sonar emitted: $D")
  		 }
  	}
   	Transition t0 whenEvent sonar -> handleSonarData
   				  whenMsg sonardeactivate -> deactivateTheSonar
   		
	State end{ 
		println("sonarqak22 BYE")
		[# System.exit(0) #]
	}
}

QActor sonarmastermock context ctxsonarqak22{
	State s0 initial {
		forward sonarqak22 -m sonaractivate : info(ok)
//		delay 20000 
//		forward sonarqak22 -m sonardeactivate : info(ok)
	}
} 

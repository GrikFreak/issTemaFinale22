/* Generated by AN DISI Unibo */ 
package it.unibo.sonarqak22

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarqak22 ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		 var stopped = false;  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("Sonar STARTS")
					}
					 transition(edgeName="t00",targetState="active",cond=whenEvent("start_sonar"))
				}	 
				state("active") { //this:State
					action { //it:State
						
									var Distance = kotlin.random.Random.nextLong(1,100);
									
						if(  Distance <= 20 /* && !stopped */  
						 ){forward("sonar_alarm", "sonar_alarm(STOP)" ,"wasteservice" ) 
						 stopped = true  
						println("SONAR | stop with distance $Distance")
						}
						else
						 {if(  Distance > 20 && stopped  
						  ){forward("sonar_resume", "sonar_resume(OK)" ,"wasteservice" ) 
						  stopped = false  
						 println("SONAR | resume with distance $Distance")
						 }
						 }
						stateTimer = TimerActor("timer_active", 
							scope, context!!, "local_tout_sonarqak22_active", 3000.toLong() )
					}
					 transition(edgeName="t11",targetState="active",cond=whenTimeout("local_tout_sonarqak22_active"))   
				}	 
			}
		}
}

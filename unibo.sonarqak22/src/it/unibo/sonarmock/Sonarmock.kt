/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmock

import it.unibo.kactor.*
import alice.tuprolog.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonarmock ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						println("SONARMOCK | Mock started the sonar")
						forward("start_sonar", "start_sonar(START)" ,"sonarqak22" ) 
						stateTimer = TimerActor("timer_s0", 
							scope, context!!, "local_tout_sonarmock_s0", 1000000000.toLong() )
					}
					 transition(edgeName="t02",targetState="turn_off",cond=whenTimeout("local_tout_sonarmock_s0"))   
				}	 
				state("turn_off") { //this:State
					action { //it:State
						println("SONARMOCK | Turned off the sonar")
					}
				}	 
			}
		}
}
